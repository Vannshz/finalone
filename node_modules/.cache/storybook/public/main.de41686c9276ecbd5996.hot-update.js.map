{"version":3,"file":"main.de41686c9276ecbd5996.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAfA;AADA;AADA;AADA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAcA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AA/DA;;AA8FA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAPA;;AAeA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AA8BA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAvFA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AA2GA;;AAlLA;AAqEA;;;AArEA;AAoLA","sources":["webpack://new-blinkist/./src/components/organisms/Card/Card.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@mui/styles\";\nimport { createTheme, ThemeProvider } from \"@mui/material\";\nimport { Box } from \"@mui/material\";\nimport styled from \"@emotion/styled\";\nimport Typography from \"../../atoms/typography/Typography\";\nimport IconTypography from \"../../molecules/IconTypography/IconTypography\";\nimport Button from \"../../molecules/Buttons/Buttons\";\nimport { ReactComponent as Time } from \"../../../images/time.svg\";\nimport { ReactComponent as User } from \"../../../images/user.svg\";\nimport { ReactComponent as Add } from \"../../../images/add.svg\";\nimport api from \"../../../api/api\";\nimport { DataObject } from \"../BookDescription/BookDescription\";\nimport ProgressBar from \"../../atoms/ProgessBar\";\n\nconst theme = createTheme({\n  components: {\n    MuiTypography: {\n      styleOverrides: {\n        subtitle1: {\n          fontFamily: \"Cera Pro\",\n          fontlWeight: \"bold\",\n          fontSize: \"18px\",\n          lineHeight: \"23px\",\n          color: \"#03314B\",\n        },\n        body1: {\n          fontFamily: \"Cera Pro\",\n          fontStyle: \"normal\",\n          fontWeight: \"normal\",\n          fontSize: \"16px\",\n          lineHeight: \"20px\",\n        },\n        caption: {\n          fontFamily: \"Cera Pro\",\n          fontStyle: \"normal\",\n          fontWeight: \"normal\",\n          fontSize: \"14px\",\n          lineHeight: \"18px\",\n          color: \"#6D787E\",\n        },\n      },\n    },\n  },\n});\n\nconst RootContainer = styled(\"div\")({\n  width: \"284px\",\n  // height: \"466px\",\n  height: \"485px\",\n  background: \"#FFFFFF\",\n  border: \"1px solid #E1ECFC\",\n  boxSizing: \"border-box\",\n  borderRadius: \"8\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: \"12px\",\n  overflow: \"hidden\",\n});\n\nconst useStyles = makeStyles({\n  image: {\n    position: \"relative\",\n    height: \"292px\",\n    width: \"294.1px\",\n  },\n  title: {\n    position: \"relative\",\n    top: \"23px\",\n    left: \"16px\",\n    bottom: \"80px\",\n    height: \"23px\",\n    fontFamily: \"Cera Pro\",\n    fontSize: \"18px\",\n    lineHeight: \"23px\",\n    color: \"#03314B\",\n  },\n  author: {\n    position: \"relative\",\n    top: \"16px\",\n    left: \"16px\",\n    height: \"20px\",\n    fontFamily: \"Cera Pro\",\n    fontSize: \"16px\",\n    lineHeight: \"20px\",\n    color: \"#6D787E\",\n  },\n  rowFlex: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    top: \"17px\",\n  },\n  time: {\n    position: \"relative\",\n    left: \"5px\",\n    top: \"16px\",\n    fontFamily: \"Cera Pro\",\n    fontSize: \"14px\",\n    lineHeight: \"18px\",\n    color: \"#6D787E\",\n  },\n  read: {\n    position: \"relative\",\n    top: \"16px\",\n    left: \"47.33px\",\n    fontFamily: \"Cera Pro\",\n    fontSize: \"14px\",\n    lineHeight: \"18px\",\n    textAlign: \"right\",\n    color: \"#6D787E\",\n  },\n  finished: {\n    fontFamily: \"Cera Pro\",\n    fontStyle: \"normal\",\n    fontWeight: \"500\",\n    fontSize: \"16px\",\n    lineHeight: \"20px\",\n    color: \"#0365F2\",\n    textAlign: \"center\",\n    position: \"relative\",\n    // top: \"15px\",\n    cursor: \"pointer\",\n  },\n  addButton: {\n    width: \"100%\",\n    height: \"52px\",\n    color: '#0365F2 !important',\n    \"&:hover\": {\n      color: 'white !important',\n      backgroundColor: '#0365F2 !important',\n      fill: 'white'\n    } \n   },\n});\n\ninterface Props {\n  children?: React.ReactNode;\n  className?: string;\n  image?: string;\n  title: string;\n  author: string;\n  time: string;\n  read: string;\n    isFinished?: boolean;\n    addToLibrary?: boolean;\n    readAgain?: boolean;\n  onClick?: () => void;\n  value: number;\n  id?: number;\n} \n\n\n\n\nconst Card = (props: Props) => {\n  const [mouseState, setMouseState] = useState(false);\n  const [linkStyle, setLinkStyle] = useState({});\n  const [iconStyle, setIconStyle] = useState({});\n\n  const [bookData, setBookData] = useState<DataObject>({\n    id: 1,\n    title: \"\",\n    author: \"\",\n    image: \"\",\n    time: \"\",\n    read: \"\",\n    state: {\n      isFinished: false,\n      isTrending: false,\n      isFeatured: false,\n      justAdded: false,\n    },\n  });\n\n  const handleMouseEnter = () => {\n    setMouseState(true);\n    setLinkStyle({\n      backgroundColor: \"#0365F2\",\n      color: \"white\",\n    });\n\n    setIconStyle({\n      fill: \"white\",\n      stroke: \"white\",\n    });\n  };\n\n  const handleMouseLeave = () => {\n    setMouseState(false);\n    setLinkStyle({\n      backgroundColor: \"#FFFFFF\",\n    });\n    setIconStyle({});\n  };\n\n  const addToCurrentlyReading = async (num:number) => {\n    bookData.state.isFinished = false;\n    bookData.state.isTrending = false;\n    await api.put(`/library/${num}`, bookData);\n  }\n\n  const updateFinish = async (num: number) => {\n    if (bookData.state.isFinished) {\n      bookData.state.isFinished = false;\n    } else {\n      bookData.state.isFinished = true;\n    }\n    await api.put(`/library/${num}`, bookData);\n  };\n\n  useEffect(() => {\n    const getData = async (val: number) => {\n      if(val && val !==0 )\n      {\n      const response = await api.get(`/library/${val}`);\n      const mydata = response.data;\n      setBookData(mydata);\n      }\n    }\n      getData(props.value);\n    \n  }, [props.value]);\n\n  const style = useStyles();\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <RootContainer onClick={props.onClick}>\n          <img src={props.image} alt=\"img\" className={style.image} />\n          <Typography variant=\"subtitle1\" className={style.title}>\n            {props.title}\n          </Typography>\n          <Typography variant=\"body1\" className={style.author}>\n            {props.author}\n          </Typography>\n          <div className={style.rowFlex}>\n            <div className={style.time}>\n              <IconTypography\n                iconSrc={<Time />}\n                variant=\"caption\"\n                title={props.time}\n              />\n            </div>\n            <div className={style.read}>\n              {props.read === \"\" ? null : (\n                <IconTypography\n                  iconSrc={<User />}\n                  variant=\"caption\"\n                  title={props.read}\n                />\n              )}\n            </div>\n          </div>\n\n          {/* {props.isFinished ? (\n            <Typography variant=\"body1\" className={style.finished} onClick={() => updateFinish(props.value)}>\n              Finished\n            </Typography>\n          ) : null} */}\n\n\n            {props.isFinished ? (\n          <div style={{height: 52, position:'relative',top:30, bottom:0}}>\n            <Typography variant=\"body1\" className={style.finished} onClick={() => updateFinish(props.value)} style={{cursor:'pointer'}} >\n              Finished\n            </Typography>\n            <Box\n            sx={{\n                width: 284,\n                bgcolor: '#F1F6F4',\n                mt:\"4px\",\n               \n                borderRadius: 8,\n                boxSizing: 'border-box',\n              }}\n            >\n              <ProgressBar progress={30} />\n            </Box>\n            </div>\n          ) : null}\n\n\n\n  \n{props.readAgain ? (\n            <div style={{height: 52, position:'relative',top:30, bottom:0}}>\n            <Typography variant=\"body1\" className={style.finished} onClick={() => updateFinish(props.value)} style={{cursor:'pointer'}}>\n              Read Again\n            </Typography>\n            <Box\n            sx={{\n                width: 284,\n                bgcolor: '#F1F6F4',\n                mt:\"4px\",\n                borderRadius: 8,\n                boxSizing: 'border-box',\n              }}\n            >\n              <ProgressBar progress={100} />\n            </Box>\n            </div>\n            \n          ) : null}\n\n\n\n\n          {/* {props.readAgain ? (\n            <Typography variant=\"body1\" className={style.finished} onClick={() => updateFinish(props.value)}>\n              Read Again\n            </Typography>\n          ) : null} */}\n\n          {props.addToLibrary ? (\n            <Button\n              style={linkStyle}\n              className={style.addButton}\n              onMouseEnter={() => handleMouseEnter}\n              onMouseLeave={() => handleMouseLeave}\n              onClick={() => addToCurrentlyReading}\n            >\n              <IconTypography\n                iconSrc={<Add style={iconStyle} />}\n                variant=\"body1\"\n                title=\"Add to library\"\n              />\n            </Button>\n          ) : null}\n        </RootContainer>\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default Card;\n"],"names":[],"sourceRoot":""}